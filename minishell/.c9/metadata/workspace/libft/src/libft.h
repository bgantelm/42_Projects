{"changed":true,"filter":false,"title":"libft.h","tooltip":"/libft/src/libft.h","value":"/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   libft.h                                            :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: bgantelm <marvin@42.fr>                    +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2015/11/27 13:13:25 by bgantelm          #+#    #+#             */\n/*   Updated: 2015/11/30 14:09:31 by bgantelm         ###   ########.fr       */\n/*                                                                            */\n/* ************************************************************************** */\n\n#ifndef LIBFT_H\n# define LIBFT_H\n\n# include <stdlib.h>\n# include <string.h>\n# include <unistd.h>\n\ntypedef\tstruct\t\ts_list\n{\n\tvoid\t\t\t*content;\n\tsize_t\t\t\tcontent_size;\n\tstruct s_list\t*next;\n}\t\t\t\t\tt_list;\n\nint\t\t\t\t\tft_atoi(const char *str);\nvoid\t\t\t\tft_bzero(void *s, size_t n);\nint\t\t\t\t\tft_isalnum(int c);\nint\t\t\t\t\tft_isalpha(int c);\nint\t\t\t\t\tft_isascii(int c);\nint\t\t\t\t\tft_isdigit(int c);\nint\t\t\t\t\tft_isprint(int c);\nchar\t\t\t\t*ft_itoa(int n);\nvoid\t\t\t\t*ft_memalloc(size_t size);\nvoid\t\t\t\t*ft_memccpy(void *dst, const void *src, int c, size_t n);\nvoid\t\t\t\t*ft_memchr(const void *s, int c, size_t n);\nint\t\t\t\t\tft_memcmp(const void *s1, const void *s2, size_t n);\nvoid\t\t\t\t*ft_memcpy(void *dst, const void *src, size_t n);\nvoid\t\t\t\tft_memdel(void **ap);\nvoid\t\t\t\t*ft_memmove(void *dst, const void *src, size_t len);\nvoid\t\t\t\t*ft_memset(void *b, int c, size_t len);\nvoid\t\t\t\tft_putchar(char c);\nvoid\t\t\t\tft_putchar_fd(char c, int fd);\nvoid\t\t\t\tft_putendl(char const *s);\nvoid\t\t\t\tft_putendl_fd(char const *s, int fd);\nvoid\t\t\t\tft_putnbr(int n);\nvoid\t\t\t\tft_putnbr_fd(int n, int fd);\nvoid\t\t\t\tft_putstr(char const *s);\nvoid\t\t\t\tft_putstr_fd(char const *s, int fd);\nchar\t\t\t\t*ft_strcat(char *s1, const char *s2);\nchar\t\t\t\t*ft_strchr(const char *s, int c);\nvoid\t\t\t\tft_strclr(char *s);\nint\t\t\t\t\tft_strcmp(const char *s1, const char *s2);\nchar\t\t\t\t*ft_strcpy(char *dst, const char *src);\nvoid\t\t\t\tft_strdel(char **as);\nchar\t\t\t\t*ft_strdup(const char *s1);\nint\t\t\t\t\tft_strequ(char const *s1, char const *s2);\nvoid\t\t\t\tft_striter(char *s, void (*f)(char *));\nvoid\t\t\t\tft_striteri(char *s, void (*f)(unsigned int, char *));\nchar\t\t\t\t*ft_strjoin(char const *s1, char const *s2);\nsize_t\t\t\t\tft_strlcat(char *dst, const char *src, size_t size);\nsize_t\t\t\t\tft_strlen(const char *s);\nchar\t\t\t\t*ft_strmap(char const *s, char (*f)(char));\nchar\t\t\t\t*ft_strmapi(char const *s, char (*f)(unsigned int, char));\nchar\t\t\t\t*ft_strncat(char *s1, const char *s2, size_t n);\nint\t\t\t\t\tft_strncmp(const char *s1, const char *s2, size_t n);\nchar\t\t\t\t*ft_strncpy(char *dst, const char *src, size_t n);\nint\t\t\t\t\tft_strnequ(char const *s1, char const *s2, size_t n);\nchar\t\t\t\t*ft_strnew(size_t size);\nchar\t\t\t\t*ft_strnstr(const char *s1, const char *s2, size_t n);\nchar\t\t\t\t*ft_strrchr(const char *s, int c);\nchar\t\t\t\t**ft_strsplit(char const *s, char c);\nchar\t\t\t\t*ft_strstr(const char *s1, const char *s2);\nchar\t\t\t\t*ft_strsub(char const *s, unsigned int start, size_t len);\nchar\t\t\t\t*ft_strtrim(char const *s);\nint\t\t\t\t\tft_tolower(int c);\nint\t\t\t\t\tft_toupper(int c);\nt_list\t\t\t\t*ft_lstnew(void const *content, size_t content_size);\nvoid\t\t\t\tft_lstdelone(t_list **alst, void (*del)(void *, size_t));\nvoid\t\t\t\tft_lstdel(t_list **alst, void (*del)(void *, size_t));\nvoid\t\t\t\tft_lstadd(t_list **alsd, t_list *new);\nvoid\t\t\t\tft_lstiter(t_list *lst, void (*f)(t_list *elem));\nt_list\t\t\t\t*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem));\n\n#endif\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":24,"column":13},"end":{"row":24,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1450179489000}